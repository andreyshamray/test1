Description:  VPC and ELB for test1

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: test1

  DeployELB: 
    Description: Deploy ELB behind Molecule Cluster
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  
  DomainNameMain:
    Description: Random domain for test env
    Type: String
    Default: 'my-test1-app.com'

  DomainNameAltr:
    Description: Random secondary domain for test env
    Type: String
    Default: 'my-test1-app.net'

  TTLforCname: 
    Description: TTL value for CNAME record
    Type: String
    Default: '900'

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: '10.192.0.0/16'

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: '10.192.10.0/24'

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: '10.192.11.0/24'

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: '10.192.20.0/24'

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: '10.192.21.0/24'
  
  InternetIpv4cidr:
    Description: Please enter the IP range (CIDR notation) for the SG group to allow !Ref HTTPport and !Ref HTTPSport ports
    Type: String
    Default: '0.0.0.0/0'

  InternetIpv6cidr:
    Description: Please enter the IP range (CIDR notation) for the SG group to allow !Ref HTTPport and !Ref HTTPSport ports
    Type: String
    Default: '::/0'
  
  HTTPport:
    Description: HTTP port for SG to allow traffic
    Type: String
    Default: '80'
  
  HTTPSport:
    Description: HTTPS port for SG to allow traffic
    Type: String
    Default: '443'

Conditions:
  DeployELB: !Equals [ !Ref DeployELB, "true" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref InternetIpv4cidr
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: !Ref InternetIpv4cidr
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: !Ref InternetIpv4cidr
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "VPC high-level SG for test1"
      VpcId: !Ref VPC
      Tags:
        - Key: !Sub "${EnvironmentName}-vpc-sg"
          Value: !Ref EnvironmentName
      SecurityGroupIngress:
        - FromPort: !Ref HTTPport
          IpProtocol: tcp
          CidrIp: !Ref InternetIpv4cidr
          ToPort: !Ref HTTPport
          Description: allow http from !Ref InternetIpv4cidr
        - IpProtocol: tcp
          FromPort: !Ref HTTPSport
          ToPort: !Ref HTTPSport
          CidrIp: !Ref InternetIpv4cidr
          Description: allow https from !Ref InternetIpv4cidr

  ELBSecurityGroup:
    Condition: DeployELB
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP and HTTPS connections 
      SecurityGroupIngress:
        - Description: HTTP IPv4
          IpProtocol: tcp
          FromPort: !Ref HTTPport
          ToPort: !Ref HTTPport
          CidrIp: !Ref InternetIpv4cidr
        - Description: HTTP IPv6
          IpProtocol: tcp
          FromPort: !Ref HTTPport
          ToPort: !Ref HTTPport
          CidrIpv6: !Ref InternetIpv6cidr
        - Description: HTTPS IPv4
          IpProtocol: tcp
          FromPort: !Ref HTTPSport
          ToPort: !Ref HTTPSport
          CidrIp: !Ref InternetIpv4cidr
        - Description: HTTPS IPv6
          IpProtocol: tcp
          FromPort: !Ref HTTPSport
          ToPort: !Ref HTTPSport
          CidrIpv6: !Ref InternetIpv6cidr

  WebServerSecurityGroup:
    Condition: DeployELB
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS and traffic from load balancer 
      SecurityGroupIngress:
        - Description: HTTPS traffic
          IpProtocol: https
          FromPort: !Ref HTTPSport
          ToPort: !Ref HTTPSport
          CidrIp: !Ref InternetIpv4cidr
        - Description: Allow traffic from load balancer
          IpProtocol: tcp
          FromPort: !Ref HTTPport
          ToPort: !Ref HTTPport
          SourceSecurityGroupId: !Ref ELBSecurityGroup

  LoadBalancerSSLCert:
    Condition: DeployELB
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${EnvironmentName}-api.${DomainNameMain}"
      DomainValidationOptions:
        - DomainName: !Sub "${EnvironmentName}-api.${DomainNameMain}"
          ValidationDomain: !Ref DomainNameMain
        - DomainName: !Sub "${EnvironmentName}-api.${DomainNameAltr}"
          ValidationDomain: !Ref DomainNameAltr my-test-app.net
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Sub "${EnvironmentName}-api.${DomainNameAltr}"
        - !Sub "${EnvironmentName}-api.v1.${DomainNameAltr}"

  LoadBalancer:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub "${EnvironmentName}-elb"
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes: 
        - Key: routing.http2.enabled
          Value: true
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ELBSecurityGroup
  
  Api01Target:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: !Ref HTTPport
      TargetType: instance
      Targets:
        - Id: !Ref WebServer
          Port: !Ref HTTPport
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
  Api02Target:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTPS
      Port: !Ref HTTPSport
      TargetType: instance
      Targets:
        - Id: !Ref WebServer
          Port: !Ref HTTPSport
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
  HTTPSListener:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref LoadBalancerSSLCert
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Api01Target
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref HTTPSport
      Protocol: HTTPS
  HTTPlistener:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Protocol: HTTPS
          Port: '443'
          Host: '#{host}'
          Path: /#{path}
          Query: '#{query}'
          StatusCode: HTTP_301
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref HTTPport
      Protocol: HTTP

  Api01ListenerRule:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref Api01Target
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub "${EnvironmentName}-api.${DomainNameAltr}"
              - !Sub "${EnvironmentName}-api.v1.${DomainNameAltr}"
      ListenerArn: !Ref HTTPSListener
      Priority: 1
  Api02ListenerRule:
    Condition: DeployELB
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref Api02Target
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /v2
      ListenerArn: !Ref HTTPSListener
      Priority: 2

  CnameRecord01:
    Condition: DeployELB
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainNameMain}."
      Comment: Cname for !Ref DomainNameMain
      RecordSets:
      - Name: !Sub "${EnvironmentName}-api.${DomainNameMain}."
        Type: CNAME
        TTL: !Ref TTLforCname
        SetIdentifier: Frontend One
        Weight: '4'
        ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  CnameRecord02:
    Condition: DeployELB
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainNameAltr}."
      Comment: Cname for !Ref DomainNameAltr
      RecordSets:
      - Name: !Sub "${EnvironmentName}-api.${DomainNameAltr}."
        Type: CNAME
        TTL: '900'
        SetIdentifier: Frontend Two
        Weight: '6'
        ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
      - Name: !Sub "${EnvironmentName}-api.v1.${DomainNameAltr}."
        Type: CNAME
        TTL: '900'
        SetIdentifier: Frontend Two
        Weight: '8'
        ResourceRecords:
        - !GetAtt LoadBalancer.DNSName


Outputs:
  CnameRecord01:
    Condition: DeployELB
    Value: !Ref CnameRecord01
  
  CnameRecord02:
    Condition: DeployELB
    Value: !Ref CnameRecord01

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
